#include<stdio.h>
#include<stdlib.h>
#include<string>
#include<conio.h>
#include<windows.h>
#include<time.h>

#define UP    72
#define DOWN  80        //上下左右
#define LEFT  75
#define RIGHT 77
#define SPACE 32
#define ESC 27  
#define KONG 0  
#define WALL 1  
#define FOOD 2  
#define BODY 1 
#define SIZE_X 23   //围墙尺寸大小
#define SIZE_Y 30

void gotoxy(int x, int y);   //移动光标
void hidden_cursor();   //隐藏光标
int color(int c);   //颜色
void inter_face();  //初始化界面
void init_mouse();  //初始化蛇
void draw_mouse(int x);  //x=1画老鼠 x=0空格
void rand_food();   //生成食物
void move_mouse(int x, int y); //移动
void run(int x, int y, int* time_count);//运行
void pd();          //判断游戏结束，吃到食物
void game();
void MaxGrade();//最高纪录
int map[SIZE_X][SIZE_Y];
int speed = 10000;
int food;
int grade = 0;
int max_grade = 0;
const int mouse_color = 11;
const int wall_color = 2;
const int food_color = 12;

struct mouse    //蛇 
{
	int x;
	int y;      //蛇头坐标
}mouse;



int main()
{
	system("title 老鼠吃奶酪");
	system("cls");
	system("mode con cols=84 lines=26"); //设置窗口尺寸
	srand(time(NULL));  //随机数
	hidden_cursor();   //隐藏光标 
	grade = 0;
	MaxGrade();
	inter_face();     //初始化界面 
	init_mouse();     // 初始化老鼠 
	rand_food();		//产生食物 
	draw_mouse(1);
	game();
	return 0;
}


void game()         //移动控制
{
	int n = RIGHT, time_count = 0, n_tmp;
	goto loop;
	while (1)
	{
		n = getch();
		switch (n)
		{
		case UP:
		case DOWN:  if (n_tmp != LEFT && n_tmp != RIGHT) n = n_tmp; break;
		case LEFT:
		case RIGHT: if (n_tmp != UP && n_tmp != DOWN) n = n_tmp; break;
		case 'r':
		case 'R':
		case SPACE:
		case ESC: break;
		default: n = n_tmp; break;    //其他键无效
		}
	loop:
		switch (n)
		{
		case UP:	run(-1, 0, &time_count);
			n_tmp = UP;

		case DOWN: run(1, 0, &time_count);
			n_tmp = DOWN;

		case LEFT:	run(0, -1, &time_count);
			n_tmp = LEFT;

		case RIGHT:run(0, 1, &time_count);
			n_tmp = RIGHT;

		case  SPACE: break;

		case ESC:  gotoxy(SIZE_X + 1, 0);
			printf("按任意键退出游戏！");
			getch();
			exit(0);
			break;
		case 'r':
		case 'R': main(); break;
		}
	}
}


void run(int x, int y, int* time_count)
{
	int t = 0;
	while (1)
	{
		if (*time_count == 0)
			*time_count = speed;
		while (--(*time_count))
		{
			if (t == 0)
				t = 50000;
			while (--t);
			if (kbhit() != 0)
				break;
		}
		if (*time_count == 0)
		{
			move_mouse(x, y);
			pd();
		}
		else
			break;
	}
}


void pd()//判断是否撞墙或者撞到身体
{
	if (map[mouse.x][mouse.y] == WALL)
	{
		char n;
		Sleep(2000); //延时
		system("cls");
		gotoxy(SIZE_X / 2 - 2, 2 * (SIZE_Y / 3));
		if (grade > max_grade)
			printf("恭喜您打破记录，目前最高纪录为：%d", grade);
		else if (grade == max_grade)
			printf("与纪录持平，请突破你的极限！");
		else
			printf("请继续努力，你与最高记录只差：%d", max_grade - grade);
		gotoxy(SIZE_X / 2, 2 * (SIZE_Y / 3));
		printf("GAME OVER!\n");
		MaxGrade();
		do
		{
			gotoxy(SIZE_X / 2 + 2, 2 * (SIZE_Y / 3));
			printf("是否重新开始游戏(y/n): ");
			scanf("%c", &n);
			gotoxy(SIZE_X / 2 + 4, 2 * (SIZE_Y / 3));
			if (n != 'n' && n != 'N' && n != 'y' && n != 'Y')
				printf("输入错误，请重新输入!");
			else
				break;
		} while (1);
		if (n == 'n' || n == 'N')
		{
			gotoxy(SIZE_X / 2 + 4, 2 * (SIZE_Y / 3));
			printf("按任意键退出游戏！");
			exit(0);
		}
		else if (n == 'y' || n == 'Y')
			main();
	}
	else if (map[mouse.x][mouse.y] == FOOD)
	{
		grade += 100;
		if (speed > 400)
			speed -= 20;
		gotoxy(7, 2 * (SIZE_Y + 2));
		printf("分数: %d", grade); //更新显示分数
		map[food / SIZE_Y][food % SIZE_Y] = KONG; //原本的食物位置设置为KONG
		rand_food();
	}
}

void rand_food()//重新刷新食物
{
	do
	{
		food = rand() % (SIZE_X * SIZE_Y);
	} while (map[food / SIZE_Y][food % SIZE_Y] != KONG);
	map[food / SIZE_Y][food % SIZE_Y] = FOOD;
	color(food_color);
	gotoxy(food / SIZE_Y, 2 * (food % SIZE_Y));
	printf("★");
}

void move_mouse(int x, int y)//移动老鼠时的赋值
{
	int i;
	draw_mouse(0);  //原来的位置画上空格
	map[mouse.x][mouse.y] = KONG;//老鼠吃完奶酪后标记为KONG 

	mouse.x = mouse.x + x;
	mouse.y = mouse.y + y;
	draw_mouse(1);  //画出新的老鼠位置 
}

void draw_mouse(int x)//打印老鼠 
{
	int i;
	if (x != 0)
	{
		color(mouse_color);
		gotoxy(mouse.x, 2 * mouse.y);
		printf("■");
	}
	else
	{
		gotoxy(mouse.x - 1, 2 * (mouse.y - 1));
		printf("  ");
	}
}

void inter_face()//界面
{
	int i, j;
	for (i = 0; i < SIZE_X; i++)
	{
		for (j = 0; j < SIZE_Y + 12; j++)
		{
			if (i == 0 || j == 0 || i == SIZE_X - 1 || j == SIZE_Y - 1 || j == SIZE_Y + 11)
			{
				color(wall_color);
				gotoxy(i, 2 * j);
				printf("■");
				map[i][j] = WALL;
			}
			else if ((i == SIZE_X / 3 || i == SIZE_X * 2 / 3) && j > SIZE_Y / 3 && j < SIZE_Y * 2 / 3)
			{
				gotoxy(i, 2 * j);
				printf("■");
				map[i][j] = WALL;
			}
			else
			{
				gotoxy(i, 2 * j);
				printf(" ");
				map[i][j] = KONG;
			}
		}
		printf("\n");
	}
	color(mouse_color);

	gotoxy(5, 2 * (SIZE_Y + 2));
	printf("最高纪录: %d", max_grade);

	gotoxy(7, 2 * (SIZE_Y + 2));
	printf("分数: %d", grade);

	gotoxy(9, 2 * (SIZE_Y + 2));
	printf("重新开始: R");

	gotoxy(11, 2 * (SIZE_Y + 2));
	printf("暂停: space");

	gotoxy(13, 2 * (SIZE_Y + 2));
	printf("退出游戏: ESC");

}

void init_mouse()//初始化老鼠 
{
	mouse.x = SIZE_X / 2;
	mouse.y = SIZE_Y / 2;
}

void MaxGrade()//最高记录
{
	FILE* fp;
	fp = fopen("最高记录.txt", "r+");
	if (fp == NULL)
	{
		fp = fopen("最高记录.txt", "w+");
		fwrite(&max_grade, sizeof(int), 1, fp);
	}
	fseek(fp, 0, SEEK_SET);
	fread(&max_grade, sizeof(int), 1, fp);
	fseek(fp, 0, SEEK_SET);
	if (max_grade < grade)
	{
		fwrite(&grade, sizeof(int), 1, fp);
	}
}

void gotoxy(int x, int y) //移动坐标 
{

	COORD coord;

	coord.X = y;

	coord.Y = x;

	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);

}

void hidden_cursor()//隐藏光标

{

	HANDLE hOut = GetStdHandle(STD_OUTPUT_HANDLE);

	CONSOLE_CURSOR_INFO cci;

	GetConsoleCursorInfo(hOut, &cci);

	cci.bVisible = 0;//赋1为显示，赋0为隐藏

	SetConsoleCursorInfo(hOut, &cci);

}
int color(int c)//设置颜色
{
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), c);
	return 0;
}




